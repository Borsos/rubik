#!/usr/bin/env python3

import sys
import argparse

import random

import numpy as np

from cubist import conf
from cubist.units import Memory
from cubist.cubist import Cubist
from cubist.errors import CubistError, CubistMemoryError

from cubist.application import log
from cubist.application import logo
from cubist.application import help_functions

_EXPRNUM = 0
def expression_type(value):
    global _EXPRNUM
    t = _EXPRNUM
    _EXPRNUM += 1
    return (t, value)

def main():

    description = """\
================================================================================
Cubist {version}
================================================================================
{rubik}
Cubist is a command line tool to generate/read/transform/write N-dimensional
cubes. It is based on the numpy library.

Cubist can:
* create cubes from scratch;
* read input files containing N-dimensional cubes ('raw', 'text' or 'csv'
  formats are supported);
* extract a portion of the cube during read;
* execute generic expressions involving input cubes and producing other cubes;
* changing values on the cubes;
* writing cubes to output files ('raw', 'text' or 'csv' formats are supported).

""".format(version=conf.VERSION, rubik=logo.RUBIK)
    epilog = ""
    
    cubist = Cubist()

    parser = argparse.ArgumentParser(
        description=description,
        epilog=epilog,
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )

    global_group = parser.add_argument_group(
        "global options",
        description="""\
Global options""")

    global_group.add_argument("--verbose", "-v",
        dest="verbose_level",
        action="count",
        default=0,
        help="set verbose level")

    global_group.add_argument("--version", "-V",
        action='version',
        version='%(prog)s {version}'.format(version=conf.VERSION))

    global_group.add_argument("--trace-errors", "-E",
        dest="trace_errors",
        action="store_true",
        default=False,
        help="show error traceback")

    global_group.add_argument("--safe",
        dest="read_mode",
        action="store_const",
        const=conf.READ_MODE_SAFE,
        default=conf.DEFAULT_READ_MODE,
        help="safe read mode")

    global_group.add_argument("--optimized",
        dest="read_mode",
        action="store_const",
        const=conf.READ_MODE_OPTIMIZED,
        default=conf.DEFAULT_READ_MODE,
        help="safe read mode")

    global_group.add_argument("--optimized-min-size",
        metavar="S",
        dest="optimized_min_size",
        type=Memory,
        default=conf.DEFAULT_OPTIMIZED_MIN_SIZE,
        help="switch from optimized to safe read mode when reading less than C bytes (a huge value is equivalent to --safe)")

    global_group.add_argument("--memory-limit", "-m",
        metavar="L[units]",
        dest="memory_limit",
        type=Memory,
        default=conf.DEFAULT_LIMIT_MEMORY,
        help="when more than the given limit is needed for a single extracted cube, raise an error")

    global_group.add_argument("--dtype", "-t",
        metavar="D",
        dest="dtype",
        type=conf.get_dtype,
        default=conf.DEFAULT_DATA_TYPE,
        help="data type name (--help-data-types/-hd to show all available data types)")

    global_group.add_argument("--accept-bigger-raw-files", "-a",
        action="store_false",
        default=False,
        help="if an input raw file is bigger than expected, simply issue a warning message")

    global_group.add_argument("--clobber",
        action="store_true",
        default=conf.DEFAULT_CLOBBER,
        help="overwrite existing output files")

    global_group.add_argument("--no-clobber",
        action="store_false",
        default=conf.DEFAULT_CLOBBER,
        help="do not overwrite existing output files")

    global_group.add_argument("--random-seed", "-r",
        type=int,
        default=None,
        help="set the random seed")

    global_group.add_argument("--expression", "-e",
        metavar="E",
        dest="expressions",
        type=cubist.expressions.store,
        nargs='+',
        help="add an expressions to evaluate (--help-expression/-he for more information)")

    global_group.add_argument("expression",
        type=cubist.expressions.store,
        nargs='*',
        help="add an expressions to evaluate (--help-expression/-he for more information)")

    input_group = parser.add_argument_group(
        "input options",
        description="""\
Options related to input files. All these options can be labeled;
see --help-labeled-options for more information.""")

    input_group.add_argument("--input-filename", "-i",
        metavar='I',
        dest="input_filenames",
        type=cubist.input_filenames.store,
        help="input filename (--help-filename/-hf for an explanation about filenames)")

    input_group.add_argument("--shape", "-s",
        metavar="[D0[:D1[...]]]",
        dest="shapes",
        type=cubist.shapes.store,
        help="shape of the input filename")

    input_group.add_argument("--extract", "-x",
        metavar="X",
        dest="extractors",
        type=cubist.extractors.store,
        help="subcube extractor (--help-extractor/-he for more information)")

    input_group.add_argument("--input-dtype", "-It",
        metavar="D",
        dest="input_dtypes",
        type=cubist.input_dtypes.store,
        help="input data type name (--help-data-types/-hd to show all available data types)")

    input_group.add_argument("--input-format", "-If",
        dest="input_formats",
        type=cubist.input_formats.store,
        help="input file format")

    input_group.add_argument("--input-csv-separator", "-Is",
        metavar='S',
        dest="input_csv_separators",
        type=cubist.input_csv_separators.store,
        help="separator to be used with '{0}' input file format".format(conf.FILE_FORMAT_CSV))

    input_group.add_argument("--input-text-delimiter", "-Id",
        metavar='D',
        dest="input_text_delimiters",
        type=cubist.input_text_delimiters.store,
        help="delimiter to be used with '{0}' input file format".format(conf.FILE_FORMAT_TEXT))

    output_group = parser.add_argument_group(
        "output options",
        description="""\
Options related to output files. All these options can be labeled;
see --help-labeled-options for more information.""")

    write_output_filename_group = output_group.add_mutually_exclusive_group()
    write_output_filename_group.add_argument("--in-place", "-Oi",
        action="store_true",
        help="output filename is input filename (notice that, due to interpolation, output file can be different from input file)")

    write_output_filename_group.add_argument("--output-filename", "-o",
        metavar='O',
        dest="output_filenames",
        type=cubist.output_filenames.store,
        help="output filename (--help-filename/-hf for an explanation about filenames)")

    output_group.add_argument('--print', '-P',
        dest="print_cube",
        action="store_true",
        default=False,
        help="print the result cube")

    output_group.add_argument('--stats', '-S',
        dest="print_stats",
        action="store_true",
        default=False,
        help="print statistics about the result cube")

    output_group.add_argument("--split", "-l",
        metavar="D",
        dest="split_dimensions",
        type=int,
        action="append",
        default=[],
        help="split dimension D (--help-split/-hl for more information)")

    output_group.add_argument("--output-dtype", "-Ot",
        metavar="D",
        dest="output_dtypes",
        type=cubist.output_dtypes.store,
        help="output data type name (--help-data-types/-hd to show all available data types)")

    output_group.add_argument("--output-format", "-Of",
        dest="output_formats",
        type=cubist.output_formats.store,
        help="output file format")

    output_group.add_argument("--output-csv-separator", "-Os",
        metavar='S',
        dest="output_csv_separators",
        type=cubist.output_csv_separators.store,
        help="separator to be used with '{0}' output file format".format(conf.FILE_FORMAT_CSV))

    output_group.add_argument("--output-text-delimiter", "-Od",
        metavar='D',
        dest="output_text_delimiters",
        type=cubist.output_text_delimiters.store,
        help="delimiter to be used with '{0}' output file format".format(conf.FILE_FORMAT_TEXT))

    output_group.add_argument("--output-text-newline", "-On",
        metavar='N',
        dest="output_text_newlines",
        type=cubist.output_text_newlines.store,
        help="newline to be used with '{0}' output file format".format(conf.FILE_FORMAT_TEXT))

    output_group.add_argument("--output-text-converter", "-Oc",
        metavar='C',
        dest="output_text_converters",
        type=cubist.output_text_converters.store,
        help="converter to be used with '{0}' output file format (e.g. '%%.18e')".format(conf.FILE_FORMAT_TEXT))



    help_group = parser.add_argument_group(
        "help options",
        description="""\
Options to show help on specific topics """)

    help_group.add_argument("--help-dtypes", "-ht",
        dest="help_dtypes",
        action="store_true",
        default=False,
        help="show available dtypes")

    help_group.add_argument("--help-labeled-options", "-ho",
        dest="help_labeled_options",
        action="store_true",
        default=False,
        help="show help about labeled options")

    help_group.add_argument("--help-expression", "-he",
        dest="help_expression",
        action="store_true",
        default=False,
        help="show help about generic expressions")

    help_group.add_argument("--help-extractor", "-hx",
        dest="help_extractor",
        action="store_true",
        default=False,
        help="show help about extractors")

    help_group.add_argument("--help-user-defined-variables", "-hV",
        dest="help_user_defined_variables",
        action="store_true",
        default=False,
        help="show help about user defined variables")

    help_group.add_argument("--help-numpy", "-hn",
        dest="help_numpy",
        action="store_true",
        default=False,
        help="show content of the numpy module")

    help_group.add_argument("--help-cubes", "-hc",
        dest="help_cubes",
        action="store_true",
        default=False,
        help="show content of the 'cubes' (or 'cb') module")

    help_group.add_argument("--help-filenames", "-hf",
        dest="help_filenames",
        action="store_true",
        default=False,
        help="show available keywords for filename interpolation")

    help_group.add_argument("--help-split", "-hl",
        dest="help_split",
        action="store_true",
        default=False,
        help="help about splitting dimensions")

    help_group.add_argument("--help-environment-variables", "-hE",
        dest="help_environment_variables",
        action="store_true",
        default=False,
        help="help about environment variables")

    help_group.add_argument("--help-creating-cubes", "-hC",
        dest="help_creating_cubes",
        action="store_true",
        default=False,
        help="how to create cubes from scratch")

    help_group.add_argument("--help-output", "-hO",
        dest="help_output",
        action="store_true",
        default=False,
        help="help about output")

    help_group.add_argument("--help-memory-usage", "-hM",
        dest="help_memory_usage",
        action="store_true",
        default=False,
        help="help about memory usage")

    help_group.add_argument("--help-usage", "-hu",
        dest="help_usage",
        action="store_true",
        default=False,
        help="help about usage: shows some examples and common recipes")

    args = conf.CUBIST_OPTIONS + sys.argv[1:]
    try:
        args = parser.parse_args(args)
    except Exception as err:
        sys.stderr.write("error: {0}: {1}\n".format(err.__class__.__name__, err))
        sys.exit(1)

    logger = log.set_logger(args.verbose_level)
    cubist.set_logger(logger)
    cubist.set_accept_bigger_raw_files(args.accept_bigger_raw_files)
    cubist.set_read_mode(args.read_mode)
    cubist.set_in_place(args.in_place)
    cubist.set_optimized_min_size(args.optimized_min_size)
    cubist.set_memory_limit(args.memory_limit)
    cubist.set_split_dimensions(args.split_dimensions)
    cubist.set_clobber(args.clobber)
    cubist.set_print_cube(args.print_cube)
    cubist.set_print_stats(args.print_stats)
    cubist.set_dtype(args.dtype)

    help_done = False
    for key in dir(args):
        if key.startswith('help_') and getattr(args, key):
            help_function = getattr(help_functions, key)
            help_function()
            help_done = True
    if help_done:
        sys.exit(0)
        
    
    if args.random_seed is not None:
        np.random.seed(args.random_seed)
        random.seed(args.random_seed)

    return_code = 0
    try:
        return_code = cubist.run()
    except CubistMemoryError:
        log.trace_error(args.trace_errors)
        logger.error("error: the memory limit of {0} has been exceeded; you can try to increase the memory limit (--memory-limit/-m)".format(args.memory_limit))
    except:
        log.trace_error(args.trace_errors)

    if return_code:
        sys.exit(return_code)


if __name__ == "__main__":
    main()
